// Generated by CoffeeScript 1.9.2
(function() {
  var Main, TIMER, Wave, WaveComponent, getSign;

  WaveComponent = (function() {
    function WaveComponent() {
      this.y = 0;
      this.a = 0;
      this.v = 0;
    }

    WaveComponent.prototype.update = function() {
      var friction, k;
      k = 1;
      friction = 0.3;
      this.a = -k * this.y - this.v * friction;
      this.v += this.a;
      return this.y += this.v;
    };

    return WaveComponent;

  })();

  Wave = (function() {
    function Wave(canvas, ctx) {
      var i, wave_len;
      wave_len = 30;
      this.array = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = wave_len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push(new WaveComponent);
        }
        return results;
      })();
      this.canvas = canvas;
      this.ctx = ctx;
    }

    Wave.prototype.update = function() {
      var c, j, len, ref, results;
      ref = this.array;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        results.push(c.update());
      }
      return results;
    };

    Wave.prototype.draw = function() {
      var defalult_y, i, j, ref, x, y;
      this.ctx.lineWidth = 2;
      this.ctx.strokeStyle = "#FF0000";
      defalult_y = this.canvas.height * 0.3;
      this.ctx.beginPath();
      for (i = j = 0, ref = this.array.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        x = this.canvas.width / (this.array.length - 1) * i;
        y = this.array[i].y + defalult_y;
        if (x === 0) {
          this.ctx.moveTo(x, y);
        } else {
          this.ctx.lineTo(x, y);
        }
      }
      return this.ctx.stroke();
    };

    Wave.prototype.givePulse = function() {
      return this.array[this.array.length / 2].v = 10;
    };

    return Wave;

  })();

  Main = (function() {
    function Main() {
      this.initCanvas();
      this.accel = {
        x: 0,
        y: 0,
        z: 0
      };
      this.wave = new Wave(this.canvas, this.ctx);
      this.counter = 0;
    }

    Main.prototype.initCanvas = function() {
      var c, ctx;
      c = document.getElementById("main_canvas");
      c.width = $(window).width();
      c.height = $(window).height();
      ctx = c.getContext("2d");
      this.canvas = c;
      return this.ctx = ctx;
    };

    Main.prototype.update = function() {
      this.wave.update();
      if (this.counter % 10 === 0) {
        console.log('pulse');
        this.wave.givePulse();
      }
      return this.counter += 1;
    };

    Main.prototype.draw = function() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.wave.draw();
    };

    Main.prototype.drawAccel = function() {
      var ctx, h, max, w, x, y, z;
      ctx = this.ctx;
      x = this.accel.x;
      y = this.accel.y;
      z = this.accel.z;
      h = this.canvas.height;
      w = this.canvas.width;
      max = 10;
      ctx.lineWidth = 2;
      ctx.strokeStyle = "#FF0000";
      ctx.fillStyle = "#FF0000";
      ctx.beginPath();
      ctx.moveTo(w / 2, h / 2);
      ctx.lineTo(w / 2 + x / max * w / 2, h / 2 + y / max * h / 2);
      ctx.stroke();
      ctx.beginPath();
      ctx.arc(w / 2 + x / max * w / 2, h / 2 + y / max * h / 2, 8, 0, 2 * Math.PI, false);
      return ctx.fill();
    };

    Main.prototype.devicemotionHandler = function(event) {
      this.accel.x = event.acceleration.x;
      this.accel.y = event.acceleration.y;
      return this.accel.z = event.acceleration.z;
    };

    return Main;

  })();

  TIMER = null;

  $(function() {
    var app;
    app = new Main;
    window.addEventListener("devicemotion", function(event) {
      return app.devicemotionHandler(event);
    });
    return TIMER = setInterval(function() {
      app.update();
      return app.draw();
    }, 33);
  });

  getSign = function(n) {
    var num;
    if (n >= 0) {
      "+";
    } else {
      "-";
    }
    num = Math.floor(Math.abs(n) * 100) / 100;
    return num.toString();
  };

}).call(this);
